diff --git a/arch/arm/mach-msm/Kconfig b/arch/arm/mach-msm/Kconfig
index 4b7ee4609842..6b583078ddeb 100644
--- a/arch/arm/mach-msm/Kconfig
+++ b/arch/arm/mach-msm/Kconfig
@@ -1878,6 +1878,22 @@ config FSM9900_GSM_NL
 	  The serial port connection can be established to communicate with the
 	  GSM NL module.
 
+config RTC_AUTO_PWRON
+        bool "RTC Auto Power on PM8x16 PMICs"
+        depends on ARCH_MSM8916
+        default n
+        help
+          Support for the auto power on alarm on the PM8X16 PMIC.
+          Say Y if you want to enable this feature.
+
+config RTC_AUTO_PWRON_PARAM
+        bool "RTC Auto Power on with param PM8x16 PMICs"
+        depends on RTC_AUTO_PWRON
+        default n
+        help
+          This option is used to prevent invalid RTC alarm power on.
+          Say Y if you want to enable this feature.
+
 config BARCODE_PAINTER
         bool "Bootloader Barcode Print MSM8916"
         depends on ARCH_MSM8916
diff --git a/drivers/misc/sec_param.c b/drivers/misc/sec_param.c
index 117e1cddc7f7..7655685f3960 100644
--- a/drivers/misc/sec_param.c
+++ b/drivers/misc/sec_param.c
@@ -126,6 +126,17 @@ bool sec_get_param(enum sec_param_index index, void *value)
 		printk(KERN_INFO "param_data.update_cp_bin :[%d]!!", param_data->update_cp_bin);
 		break;
 #endif
+#ifdef CONFIG_RTC_AUTO_PWRON_PARAM
+	case param_index_boot_alarm_set:
+		memcpy(value, &(param_data->boot_alarm_set), sizeof(unsigned int));
+		break;
+	case param_index_boot_alarm_value_l:
+		memcpy(value, &(param_data->boot_alarm_value_l), sizeof(unsigned int));
+		break;
+	case param_index_boot_alarm_value_h:
+		memcpy(value, &(param_data->boot_alarm_value_h), sizeof(unsigned int));
+		break;
+#endif
 #ifdef CONFIG_SEC_MONITOR_BATTERY_REMOVAL
 	case param_index_normal_poweroff:
 		memcpy(&(param_data->normal_poweroff), value, sizeof(unsigned int));
@@ -185,6 +196,17 @@ bool sec_set_param(enum sec_param_index index, void *value)
 				value, sizeof(unsigned int));
 		break;
 #endif
+#ifdef CONFIG_RTC_AUTO_PWRON_PARAM
+	case param_index_boot_alarm_set:
+		memcpy(&(param_data->boot_alarm_set), value, sizeof(unsigned int));
+		break;
+	case param_index_boot_alarm_value_l:
+		memcpy(&(param_data->boot_alarm_value_l), value, sizeof(unsigned int));
+		break;
+	case param_index_boot_alarm_value_h:
+		memcpy(&(param_data->boot_alarm_value_h), value, sizeof(unsigned int));
+		break;
+#endif
 #ifdef CONFIG_SEC_MONITOR_BATTERY_REMOVAL
 	case param_index_normal_poweroff:
 		memcpy(&(param_data->normal_poweroff), value, sizeof(unsigned int));
diff --git a/drivers/rtc/interface.c b/drivers/rtc/interface.c
index 42bd57da239d..11c7617ae605 100644
--- a/drivers/rtc/interface.c
+++ b/drivers/rtc/interface.c
@@ -413,7 +413,49 @@ int rtc_initialize_alarm(struct rtc_device *rtc, struct rtc_wkalrm *alarm)
 }
 EXPORT_SYMBOL_GPL(rtc_initialize_alarm);
 
+#ifdef CONFIG_RTC_AUTO_PWRON
+int rtc_set_bootalarm(struct rtc_device *rtc, struct rtc_wkalrm *alarm)
+{
+    int err;
+/*	err = mutex_lock_interruptible(&rtc->ops_lock); */
+/*	if (err) */
+/*		return err; */
+
+	if (!rtc->ops) {
+		dev_err(&rtc->dev, "ops not exist\n");
+		err = -ENODEV;
+	} else if (!rtc->ops->set_bootalarm) {
+		dev_err(&rtc->dev, "bootalarm func not exist\n");
+		err = -EINVAL;
+	} else
+		err = rtc->ops->set_bootalarm(rtc->dev.parent, alarm);
+	pr_info("[SAPA] %s\n",__func__);
+/*	mutex_unlock(&rtc->ops_lock); */
+	return err;
+}
+EXPORT_SYMBOL_GPL(rtc_set_bootalarm);
 
+int rtc_get_bootalarm(struct rtc_device *rtc, struct rtc_wkalrm *alarm)
+{
+    int err;
+/*	err = mutex_lock_interruptible(&rtc->ops_lock); */
+/*	if (err) */
+/*		return err; */
+
+	if (!rtc->ops) {
+		dev_err(&rtc->dev, "ops not exist\n");
+		err = -ENODEV;
+	} else if (!rtc->ops->read_bootalarm) {
+		dev_err(&rtc->dev, "bootalarm func not exist\n");
+		err = -EINVAL;
+	} else
+		err = rtc->ops->read_bootalarm(rtc->dev.parent, alarm);
+	pr_info("[SAPA] %s\n",__func__);
+/*	mutex_unlock(&rtc->ops_lock); */
+	return err;
+}
+EXPORT_SYMBOL_GPL(rtc_get_bootalarm);
+#endif /* CONFIG_AUTO_PWRON */
 
 int rtc_alarm_irq_enable(struct rtc_device *rtc, unsigned int enabled)
 {
diff --git a/drivers/rtc/qpnp-rtc.c b/drivers/rtc/qpnp-rtc.c
index 921a33a0110f..cf68e5153dd6 100644
--- a/drivers/rtc/qpnp-rtc.c
+++ b/drivers/rtc/qpnp-rtc.c
@@ -21,6 +21,21 @@
 #include <linux/spinlock.h>
 #include <linux/spmi.h>
 
+#ifdef CONFIG_RTC_AUTO_PWRON
+#include <linux/reboot.h>
+extern int poweroff_charging;
+
+#ifdef CONFIG_RTC_AUTO_PWRON_PARAM
+#include <linux/sec_param.h>
+#include <linux/param.h>
+#include <linux/wakelock.h>
+
+/* for alarm mode */
+#define ALARM_MODE_NOMAL			(0x6A)
+#define ALARM_MODE_BOOT_RTC		(0x7B)
+#define SAPA_BOOTING_TIME		(60*4)
+#endif
+#endif
 /* RTC/ALARM Register offsets */
 #define REG_OFFSET_ALARM_RW	0x40
 #define REG_OFFSET_ALARM_CTRL1	0x46
@@ -63,7 +78,33 @@ struct qpnp_rtc {
 	struct rtc_device *rtc;
 	struct spmi_device *spmi;
 	spinlock_t alarm_ctrl_lock;
+#ifdef CONFIG_RTC_AUTO_PWRON
+	bool lpm_mode;
+	bool alarm_irq_flag;
+	struct wake_lock alarm_wake_lock;
+#endif
 };
+#ifdef CONFIG_RTC_AUTO_PWRON
+#ifdef CONFIG_RTC_AUTO_PWRON_PARAM
+static struct workqueue_struct*	sapa_workq;
+static struct workqueue_struct*	sapa_check_workq;
+static struct delayed_work		sapa_load_param_work;
+static struct delayed_work		sapa_reboot_work;
+static struct delayed_work		sapa_check_work;
+static struct wake_lock			sapa_wakelock;
+static int kparam_loaded, shutdown_loaded;
+
+#endif
+static struct rtc_wkalrm		sapa_saved_time;
+static int						sapa_dev_suspend;
+
+static void print_time(char* str, struct rtc_time *time, unsigned long sec)
+{
+	pr_info("%s: %4d-%02d-%02d %02d:%02d:%02d [%lu]\n", str,
+		time->tm_year, time->tm_mon, time->tm_mday,
+		time->tm_hour, time->tm_min, time->tm_sec, sec);
+}
+#endif
 
 static int qpnp_read_wrapper(struct qpnp_rtc *rtc_dd, u8 *rtc_val,
 			u16 base, int count)
@@ -219,6 +260,11 @@ qpnp_rtc_set_time(struct device *dev, struct rtc_time *tm)
 	}
 
 	rtc_dd->alarm_ctrl_reg1 = ctrl_reg;
+#ifdef CONFIG_RTC_AUTO_PWRON
+	pr_info("%s : secs = %lu, h:m:s == %d:%d:%d, d/m/y = %d/%d/%d\n", __func__,
+			secs, tm->tm_hour, tm->tm_min, tm->tm_sec,
+			tm->tm_mday, tm->tm_mon, tm->tm_year);
+#endif
 
 rtc_rw_fail:
 	if (alarm_enabled)
@@ -307,6 +353,33 @@ qpnp_rtc_set_alarm(struct device *dev, struct rtc_wkalrm *alarm)
 		dev_err(dev, "Trying to set alarm in the past\n");
 		return -EINVAL;
 	}
+#ifdef CONFIG_RTC_AUTO_PWRON
+	if ( sapa_saved_time.enabled ) {
+		unsigned long secs_pwron;
+
+		/* If there are power on alarm before alarm time, ignore alarm */
+		rtc_tm_to_time(&sapa_saved_time.time, &secs_pwron);
+
+		print_time("[SAPA] rtc ", &rtc_tm, secs_rtc);
+		print_time("[SAPA] sapa", &sapa_saved_time.time, secs_pwron);
+		print_time("[SAPA] alrm", &alarm->time, secs);
+
+		if ( secs_pwron <= secs_rtc && secs_rtc <= secs_pwron+SAPA_BOOTING_TIME ) {
+			if ( poweroff_charging ) {
+				wake_lock(&sapa_wakelock);
+				rtc_dd->alarm_irq_flag = true;
+				pr_info("%s [SAPA] Restart(alarm)\n",__func__);
+				queue_delayed_work(sapa_workq, &sapa_reboot_work, (1*HZ));
+				return -EINVAL;
+			}
+		}
+		if ( secs_rtc < secs_pwron && secs_pwron < secs ) {
+			pr_info("[SAPA] override with SAPA\n");
+			memcpy(alarm, &sapa_saved_time, sizeof(struct rtc_wkalrm));
+			secs = secs_pwron;
+		}
+	}
+#endif
 
 	value[0] = secs & 0xFF;
 	value[1] = (secs >> 8) & 0xFF;
@@ -388,6 +461,9 @@ qpnp_rtc_alarm_irq_enable(struct device *dev, unsigned int enabled)
 	u8 ctrl_reg;
 	u8 value[4] = {0};
 
+#ifdef CONFIG_RTC_AUTO_PWRON
+	pr_info("[SAPA] irq=%d\n", enabled);
+#endif
 	spin_lock_irqsave(&rtc_dd->alarm_ctrl_lock, irq_flags);
 	ctrl_reg = rtc_dd->alarm_ctrl_reg1;
 	ctrl_reg = enabled ? (ctrl_reg | BIT_RTC_ALARM_ENABLE) :
@@ -416,10 +492,358 @@ rtc_rw_fail:
 	return rc;
 }
 
+#ifdef CONFIG_RTC_AUTO_PWRON
+static void sapa_reboot(struct work_struct *work)
+{
+	/* machine_restart(NULL); */
+	kernel_restart(NULL);
+	/* panic("Test panic"); */
+}
+
+#ifdef CONFIG_RTC_AUTO_PWRON_PARAM
+static struct device *			sapa_rtc_dev;
+static int qpnp_rtc0_resetbootalarm(struct device *dev);
+static void sapa_load_kparam(struct work_struct *work)
+{
+	int temp1, temp2, temp3;
+	unsigned long pwron_time=(unsigned long)0;
+		bool rc, kparam_ok = true;
+	static unsigned int kparam_count = (unsigned int)0;
+
+	rc = sec_get_param(param_index_boot_alarm_set, &temp1);
+	if(!rc)
+		kparam_ok = false;
+	rc = sec_get_param(param_index_boot_alarm_value_l, &temp2);
+	if(!rc)
+		kparam_ok = false;
+	rc = sec_get_param(param_index_boot_alarm_value_h, &temp3);
+	if(!rc)
+		kparam_ok = false;
+
+	if(!kparam_ok) {
+		if(kparam_count < 3) {
+			queue_delayed_work(sapa_workq, &sapa_load_param_work, (5*HZ));
+			kparam_count++;
+			pr_err("[SAPA] %s fail, count=%d\n", __func__, kparam_count);
+			return ;
+		} else {
+			pr_err("[SAPA] %s final fail, just go on\n", __func__);
+		}
+	}
+
+	pwron_time = temp3<<4 | temp2;
+
+	pr_info("[SAPA] %s %x %lu\n", __func__, temp1, pwron_time);
+	if ( temp1 == ALARM_MODE_BOOT_RTC )
+		sapa_saved_time.enabled = 1;
+	else
+		sapa_saved_time.enabled = 0;
+
+	kparam_loaded = 1;
+
+
+	rtc_time_to_tm( pwron_time, &sapa_saved_time.time );
+	print_time("[SAPA] saved_time", &sapa_saved_time.time, pwron_time);
+    /* Bug fix : USB cable or IRQ is disabled in LPM chg */
+	qpnp_rtc0_resetbootalarm(sapa_rtc_dev);
+}
+#endif
+
+static void sapa_store_kparam(struct rtc_wkalrm *alarm)
+{
+#ifdef CONFIG_RTC_AUTO_PWRON_PARAM
+	//int temp1, temp2, temp3;
+	int MSB=0, LSB=0;
+	int alarm_mode = 0;
+	unsigned long secs;
+
+	if ( alarm == &sapa_saved_time ) {
+		pr_err("[SAPA] %s: already was written\n", __func__);
+		return ;
+	}
+
+	if ( alarm->enabled ) {
+		rtc_tm_to_time(&alarm->time, &secs);
+		LSB = (int)secs;
+		MSB = (int)(secs>>4);
+
+		alarm_mode = ALARM_MODE_BOOT_RTC;
+		sec_set_param(param_index_boot_alarm_set, &alarm_mode);
+		sec_set_param(param_index_boot_alarm_value_l, &LSB);
+		sec_set_param(param_index_boot_alarm_value_h, &MSB);
+		pr_info("[SAPA] %s %x/%x/%x\n", __func__, alarm_mode, LSB, MSB);
+
+		#if 0 // for debugging
+		sec_get_param(param_index_boot_alarm_set,&temp1);
+		sec_get_param(param_index_boot_alarm_value_l, &temp2);
+		sec_get_param(param_index_boot_alarm_value_h, &temp3);
+		pr_info( "sec_set_param [%x] [%x] [%x] -- feedback\n", temp1, temp2, temp3);
+		#endif
+	}
+	else {
+		alarm_mode = ALARM_MODE_NOMAL;
+		sec_set_param(param_index_boot_alarm_set, &alarm_mode);
+		pr_info("[SAPA] %s clear\n", __func__);
+	}
+#endif
+}
+
+#ifdef CONFIG_RTC_AUTO_PWRON
+static void
+sapa_check_alarm(struct work_struct *work)
+{
+	struct qpnp_rtc *rtc_dd = dev_get_drvdata(sapa_rtc_dev);
+
+	pr_info("%s [SAPA] : lpm_mode:(%d)\n", __func__, rtc_dd->lpm_mode);
+
+	if ( poweroff_charging && sapa_saved_time.enabled) {
+		struct rtc_time now;
+		struct rtc_wkalrm alarm;
+		unsigned long curr_time, alarm_time, pwron_time;
+
+		/* To wake up rtc device */
+		wake_lock_timeout(&sapa_wakelock, HZ/2 );
+
+		qpnp_rtc_read_time(rtc_dd->rtc_dev, &now);
+		rtc_tm_to_time(&now, &curr_time);
+
+		qpnp_rtc_read_alarm(rtc_dd->rtc_dev, &alarm);
+		rtc_tm_to_time(&alarm.time, &alarm_time);
+
+		rtc_tm_to_time(&sapa_saved_time.time, &pwron_time);
+
+		pr_info("%s [SAPA] curr_time: %lu\n",__func__, curr_time);
+		pr_info("%s [SAPA] pmic_time: %lu\n",__func__, alarm_time);
+		pr_info("%s [SAPA] pwrontime: %lu [%d]\n",__func__, pwron_time, sapa_saved_time.enabled);
+
+		if ( pwron_time <= curr_time && curr_time <= pwron_time+SAPA_BOOTING_TIME )  {
+			wake_lock(&sapa_wakelock);
+			rtc_dd->alarm_irq_flag = true;
+			pr_info("%s [SAPA] Restart since RTC \n",__func__);
+			queue_delayed_work(sapa_workq, &sapa_reboot_work, (1*HZ));
+		}
+		else {
+			pr_info("%s [SAPA] not power on alarm.\n", __func__);
+			if (!sapa_dev_suspend) {
+				qpnp_rtc0_resetbootalarm(rtc_dd->rtc_dev);
+				queue_delayed_work(sapa_check_workq, &sapa_check_work, (60*HZ));
+			}
+		}
+	}
+}
+#endif
+
+static int
+sapa_rtc_getalarm(struct device *dev, struct rtc_wkalrm *alarm)
+{
+	struct rtc_time b;
+	int ret = 0;
+	struct qpnp_rtc *rtc_dd = dev_get_drvdata(dev);
+	unsigned long secs_alrm, secs_rtc;
+
+	/* read rtc time */
+	if ( qpnp_rtc_read_time(dev, &b) ) {
+		pr_err("%s [SAPA] : read time failed.\n", __func__);
+		ret = -EINVAL;
+	}
+	memcpy(alarm, &sapa_saved_time, sizeof(struct rtc_wkalrm));
+
+	if (rtc_dd->alarm_irq_flag)
+		alarm->enabled = 0x1;
+	else
+		alarm->enabled = 0x0;
+
+	pr_info("%s [SAPA] : %d, %d\n",__func__,rtc_dd->lpm_mode, alarm->enabled);
+
+	if(poweroff_charging && sapa_saved_time.enabled)
+	{
+		rtc_tm_to_time(&b, &secs_rtc);
+		rtc_tm_to_time(&alarm->time, &secs_alrm);
+
+		if ( secs_alrm <= secs_rtc && secs_rtc <= secs_alrm+SAPA_BOOTING_TIME )
+		{
+			rtc_dd->alarm_irq_flag = true;
+			pr_info("%s [SAPA] : it will be reboot \n",__func__);
+		}
+
+	}
+
+	if ( !ret ) {
+		pr_info("[SAPA] %s: [ALRM] %d-%d-%d %d:%d:%d \n", __func__,
+			alarm->time.tm_year, alarm->time.tm_mon, alarm->time.tm_mday,
+			alarm->time.tm_hour, alarm->time.tm_min, alarm->time.tm_sec);
+		pr_info("[SAPA] %s: [RTC ] %d-%d-%d %d:%d:%d \n", __func__,
+			b.tm_year, b.tm_mon, b.tm_mday,
+			b.tm_hour, b.tm_min, b.tm_sec);
+	}
+
+	return rtc_dd->lpm_mode;
+}
+
+static int
+sapa_rtc_setalarm(struct device *dev, struct rtc_wkalrm *alarm)
+{
+	int rc;
+	u8 value[4] = {0,}, ctrl_reg;
+	unsigned long secs, secs_rtc;//, irq_flags;
+	struct qpnp_rtc *rtc_dd = dev_get_drvdata(dev);
+	struct rtc_time rtc_tm;
+
+	if (!alarm->enabled) {
+		pr_info("[SAPA] Try to clear :  %4d-%02d-%02d %02d:%02d:%02d\n",
+			alarm->time.tm_year, alarm->time.tm_mon, alarm->time.tm_mday,
+			alarm->time.tm_hour, alarm->time.tm_min, alarm->time.tm_sec);
+
+		if(poweroff_charging && !kparam_loaded && shutdown_loaded){
+			pr_info("%s [SAPA] without loading kparam, it will be shutdown. No need to reset the alarm!! \n",__func__);
+			ctrl_reg = (rtc_dd->alarm_ctrl_reg1 | BIT_RTC_ALARM_ENABLE);
+			rc = qpnp_write_wrapper(rtc_dd, &ctrl_reg,rtc_dd->alarm_base + REG_OFFSET_ALARM_CTRL1, 1);
+
+			if (rc) {
+				dev_err(dev, "Write to ALARM cntrol reg failed\n");
+				goto rtc_rw_fail;
+			}
+			return 0;
+		}
+		rc = qpnp_write_wrapper(rtc_dd, value,
+				rtc_dd->alarm_base + REG_OFFSET_ALARM_RW,
+								NUM_8_BIT_RTC_REGS);
+		if (rc < 0) {
+			pr_err("[SAPA] Write to RTC ALARM registers failed\n");
+			goto rtc_rw_fail;
+		}
+
+		sapa_saved_time.enabled = 0;  // disable pwr on alarm to prevent retrying
+		sapa_store_kparam(alarm);
+
+		ctrl_reg = (alarm->enabled) ?
+			(rtc_dd->alarm_ctrl_reg1 | BIT_RTC_ALARM_ENABLE) :
+			(rtc_dd->alarm_ctrl_reg1 & ~BIT_RTC_ALARM_ENABLE);
+
+		rc = qpnp_write_wrapper(rtc_dd, &ctrl_reg,rtc_dd->alarm_base + REG_OFFSET_ALARM_CTRL1, 1);
+
+		if (rc) {
+		dev_err(dev, "Write to ALARM cntrol reg failed\n");
+			goto rtc_rw_fail;
+		}
+
+		rtc_dd->alarm_ctrl_reg1 = ctrl_reg;
+
+		/* read boot alarm */
+		rc = qpnp_rtc_read_alarm(dev, alarm);
+		if ( rc < 0 ) {
+			pr_err("[SAPA] read failed.\n");
+			return rc;
+		}
+		pr_info("[SAPA] -> %4d-%02d-%02d %02d:%02d:%02d\n",
+			alarm->time.tm_year, alarm->time.tm_mon, alarm->time.tm_mday,
+			alarm->time.tm_hour, alarm->time.tm_min, alarm->time.tm_sec);
+	}
+	else
+	{
+		pr_info("[SAPA] <- %4d-%02d-%02d %02d:%02d:%02d\n",
+			alarm->time.tm_year, alarm->time.tm_mon, alarm->time.tm_mday,
+			alarm->time.tm_hour, alarm->time.tm_min, alarm->time.tm_sec);
+
+		rtc_tm_to_time(&alarm->time, &secs);
+
+		/*
+		 * Read the current RTC time and verify if the alarm time is in the
+		 * past. If yes, return invalid.
+		 */
+		rc = qpnp_rtc_read_time(dev, &rtc_tm);
+		if (rc < 0) {
+			pr_err("[SAPA] Unable to read RTC time\n");
+			return -EINVAL;
+		}
+
+		rtc_tm_to_time(&rtc_tm, &secs_rtc);
+		if ( secs <= secs_rtc && secs_rtc <= secs+SAPA_BOOTING_TIME ) {
+			if ( poweroff_charging ) {
+				wake_lock(&sapa_wakelock);
+				rtc_dd->alarm_irq_flag = true;
+				pr_info("%s [SAPA] Restart(alarm)\n",__func__);
+				queue_delayed_work(sapa_workq, &sapa_reboot_work, (10*HZ));
+			}
+			else if (shutdown_loaded) {
+				pr_info("[SAPA] adjust to rtc+20s\n");
+				secs = secs_rtc + 10;
+			}
+		}
+		else if ( secs+SAPA_BOOTING_TIME < secs_rtc ) {
+			pr_err("[SAPA] Trying to set alarm in the past\n");
+			sapa_saved_time.enabled = 0;  // disable pwr on alarm to prevent retrying
+			sapa_store_kparam(alarm);
+			return -EINVAL;
+		}
+
+		value[0] = secs & 0xFF;
+		value[1] = (secs >> 8) & 0xFF;
+		value[2] = (secs >> 16) & 0xFF;
+		value[3] = (secs >> 24) & 0xFF;
+
+		//spin_lock_irqsave(&rtc_dd->alarm_ctrl_lock, irq_flags);
+
+		rc = qpnp_write_wrapper(rtc_dd, value,
+				rtc_dd->alarm_base + REG_OFFSET_ALARM_RW,
+								NUM_8_BIT_RTC_REGS);
+		if (rc < 0) {
+			pr_err("[SAPA] Write to RTC ALARM registers failed\n");
+			goto rtc_rw_fail;
+		}
+
+		ctrl_reg = (alarm->enabled) ?
+			(rtc_dd->alarm_ctrl_reg1 | BIT_RTC_ALARM_ENABLE) :
+			(rtc_dd->alarm_ctrl_reg1 & ~BIT_RTC_ALARM_ENABLE);
+
+		rc = qpnp_write_wrapper(rtc_dd, &ctrl_reg,rtc_dd->alarm_base + REG_OFFSET_ALARM_CTRL1, 1);
+
+		if (rc) {
+			dev_err(dev, "Write to ALARM cntrol reg failed\n");
+				goto rtc_rw_fail;
+		}
+
+		rtc_dd->alarm_ctrl_reg1 = ctrl_reg;
+
+		if ( alarm != &sapa_saved_time ) {
+			memcpy(&sapa_saved_time, alarm, sizeof(struct rtc_wkalrm));
+			sapa_store_kparam(alarm);
+			pr_info("[SAPA] updated\n");
+		}
+	}
+
+	/* read boot alarm */
+	rc = qpnp_rtc_read_alarm(dev, alarm);
+	if ( rc < 0 ) {
+		pr_err("[SAPA] write failed.\n");
+			return rc;
+	}
+	pr_info("[SAPA] -> %4d-%02d-%02d %02d:%02d:%02d\n",
+			alarm->time.tm_year, alarm->time.tm_mon, alarm->time.tm_mday,
+			alarm->time.tm_hour, alarm->time.tm_min, alarm->time.tm_sec);
+	if ( alarm != &sapa_saved_time )
+		qpnp_rtc_read_time(dev,&(alarm->time));
+
+rtc_rw_fail:
+	//spin_unlock_irqrestore(&rtc_dd->alarm_ctrl_lock, irq_flags);
+	return rc;
+}
+
+static int qpnp_rtc0_resetbootalarm(struct device *dev)
+{
+	pr_info("[SAPA] rewrite [%d]\n", sapa_saved_time.enabled);
+	return sapa_rtc_setalarm(dev, &sapa_saved_time);
+}
+#endif /*CONFIG_RTC_AUTO_PWRON*/
+
 static struct rtc_class_ops qpnp_rtc_ops = {
 	.read_time = qpnp_rtc_read_time,
 	.set_alarm = qpnp_rtc_set_alarm,
 	.read_alarm = qpnp_rtc_read_alarm,
+#ifdef CONFIG_RTC_AUTO_PWRON
+	.read_bootalarm = sapa_rtc_getalarm,
+	.set_bootalarm  = sapa_rtc_setalarm,
+#endif /*CONFIG_RTC_AUTO_PWRON*/
 	.alarm_irq_enable = qpnp_rtc_alarm_irq_enable,
 };
 
@@ -457,6 +881,43 @@ static irqreturn_t qpnp_alarm_trigger(int irq, void *dev_id)
 	if (rc)
 		dev_err(rtc_dd->rtc_dev,
 				"Write to ALARM control reg failed\n");
+#ifdef CONFIG_RTC_AUTO_PWRON
+	if ( poweroff_charging )
+		pr_info("%s [SAPA] : irq(%d), lpm_mode\n", __func__, irq);
+
+	if ( poweroff_charging && sapa_saved_time.enabled) {
+		struct rtc_time now;
+		struct rtc_wkalrm alarm;
+		unsigned long curr_time, alarm_time, pwron_time;
+
+		/* To wake up rtc device */
+		wake_lock_timeout(&sapa_wakelock, HZ/2 );
+
+		qpnp_rtc_read_time(rtc_dd->rtc_dev, &now);
+		rtc_tm_to_time(&now, &curr_time);
+
+		qpnp_rtc_read_alarm(rtc_dd->rtc_dev, &alarm);
+		rtc_tm_to_time(&alarm.time, &alarm_time);
+
+		rtc_tm_to_time(&sapa_saved_time.time, &pwron_time);
+
+		pr_info("%s [SAPA] curr_time: %lu\n",__func__, curr_time);
+		pr_info("%s [SAPA] pmic_time: %lu\n",__func__, alarm_time);
+		pr_info("%s [SAPA] pwrontime: %lu [%d]\n",__func__, pwron_time, sapa_saved_time.enabled);
+
+		if ( pwron_time <= curr_time && curr_time <= pwron_time+SAPA_BOOTING_TIME )  {
+			wake_lock(&sapa_wakelock);
+			rtc_dd->alarm_irq_flag = true;
+			pr_info("%s [SAPA] Restart since RTC \n",__func__);
+			queue_delayed_work(sapa_workq, &sapa_reboot_work, (1*HZ));
+		}
+		else {
+			pr_info("%s [SAPA] not power on alarm.\n", __func__);
+			if (!sapa_dev_suspend)
+				qpnp_rtc0_resetbootalarm(rtc_dd->rtc_dev);
+		}
+	}
+#endif
 
 rtc_alarm_handled:
 	return IRQ_HANDLED;
@@ -469,6 +930,11 @@ static int qpnp_rtc_probe(struct spmi_device *spmi)
 	struct qpnp_rtc *rtc_dd;
 	struct resource *resource;
 	struct spmi_resource *spmi_resource;
+#ifdef CONFIG_RTC_AUTO_PWRON_PARAM
+	u8 alarm_reg=0;
+	u8 value[4];
+	unsigned long rtc_secs, pmic_secs;
+#endif
 
 	rtc_dd = devm_kzalloc(&spmi->dev, sizeof(*rtc_dd), GFP_KERNEL);
 	if (rtc_dd == NULL) {
@@ -570,6 +1036,9 @@ static int qpnp_rtc_probe(struct spmi_device *spmi)
 			"Read from  Alarm control reg failed\n");
 		goto fail_rtc_enable;
 	}
+#ifdef CONFIG_RTC_AUTO_PWRON_PARAM
+	alarm_reg = rtc_dd->alarm_ctrl_reg1;
+#endif
 	/* Enable abort enable feature */
 	rtc_dd->alarm_ctrl_reg1 |= BIT_RTC_ABORT_ENABLE;
 	rc = qpnp_write_wrapper(rtc_dd, &rtc_dd->alarm_ctrl_reg1,
@@ -579,6 +1048,20 @@ static int qpnp_rtc_probe(struct spmi_device *spmi)
 		goto fail_rtc_enable;
 	}
 
+#ifdef CONFIG_RTC_AUTO_PWRON_PARAM
+	rc = qpnp_read_wrapper(rtc_dd, value,
+			rtc_dd->rtc_base + REG_OFFSET_RTC_READ,	NUM_8_BIT_RTC_REGS);
+	if (rc) pr_err("Read from RTC reg failed\n");
+	rtc_secs = TO_SECS(value);
+
+	rc = qpnp_read_wrapper(rtc_dd, value,
+			rtc_dd->alarm_base + REG_OFFSET_ALARM_RW, NUM_8_BIT_RTC_REGS);
+	if (rc) pr_err("Read from ALARM reg failed\n");
+	pmic_secs = TO_SECS(value);
+
+	pr_info("[SAPA] alarm_reg=%02x, rtc=%lu pmic=%lu\n", alarm_reg, rtc_secs, pmic_secs);
+#endif
+
 	if (rtc_dd->rtc_write_enable == true)
 		qpnp_rtc_ops.set_time = qpnp_rtc_set_time;
 
@@ -603,11 +1086,36 @@ static int qpnp_rtc_probe(struct spmi_device *spmi)
 		goto fail_req_irq;
 	}
 
+#ifdef CONFIG_RTC_AUTO_PWRON_PARAM
+	sapa_rtc_dev = rtc_dd->rtc_dev;
+	sapa_workq = create_singlethread_workqueue("pwron_alarm_resume");
+	if (sapa_workq == NULL) {
+		pr_err("[SAPA] pwron_alarm work creating failed (%d)\n", rc);
+	}
+	wake_lock_init(&sapa_wakelock, WAKE_LOCK_SUSPEND, "alarm_trigger");
+#endif
 	device_init_wakeup(&spmi->dev, 1);
 	enable_irq_wake(rtc_dd->rtc_alarm_irq);
 
 	dev_dbg(&spmi->dev, "Probe success !!\n");
 
+#ifdef CONFIG_RTC_AUTO_PWRON_PARAM
+	rtc_dd->lpm_mode = poweroff_charging;
+	rtc_dd->alarm_irq_flag = false;
+	/* To read saved power on alarm time */
+	if ( poweroff_charging ) {
+				sapa_check_workq = create_singlethread_workqueue("pwron_alarm_check");
+		if (sapa_check_workq == NULL) {
+			pr_err("[SAPA] pwron_alarm_check work creating failed (%d)\n", rc);
+		}
+		INIT_DELAYED_WORK(&sapa_load_param_work, sapa_load_kparam);
+		INIT_DELAYED_WORK(&sapa_reboot_work, sapa_reboot);
+		INIT_DELAYED_WORK(&sapa_check_work, sapa_check_alarm);
+		queue_delayed_work(sapa_workq, &sapa_load_param_work, (5*HZ));
+		queue_delayed_work(sapa_check_workq, &sapa_check_work, (60*HZ));
+	}
+#endif
+
 	return 0;
 
 fail_req_irq:
@@ -618,9 +1126,50 @@ fail_rtc_enable:
 	return rc;
 }
 
+#ifdef CONFIG_RTC_AUTO_PWRON_PARAM
+static int qpnp_rtc_resume(struct device *dev)
+{
+	struct qpnp_rtc *rtc_dd = dev_get_drvdata(dev);
+
+	if (device_may_wakeup(dev))
+		disable_irq_wake(rtc_dd->rtc_alarm_irq);
+
+	sapa_dev_suspend = 0;
+	qpnp_rtc0_resetbootalarm(dev);
+	if(rtc_dd->lpm_mode==1)
+		queue_delayed_work(sapa_check_workq, &sapa_check_work, (1*HZ));
+
+	pr_info("%s\n",__func__);
+	return 0;
+}
+
+static int qpnp_rtc_suspend(struct device *dev)
+{
+	struct qpnp_rtc *rtc_dd = dev_get_drvdata(dev);
+
+	if (device_may_wakeup(dev))
+		enable_irq_wake(rtc_dd->rtc_alarm_irq);
+
+	sapa_dev_suspend = 1;
+	if(rtc_dd->lpm_mode==1)
+		cancel_delayed_work_sync(&sapa_check_work);
+
+	pr_info("%s\n",__func__);
+	return 0;
+}
+
+static const struct dev_pm_ops qpnp_rtc_pm_ops = {
+	.suspend = qpnp_rtc_suspend,
+	.resume = qpnp_rtc_resume,
+};
+#endif
+
 static int qpnp_rtc_remove(struct spmi_device *spmi)
 {
 	struct qpnp_rtc *rtc_dd = dev_get_drvdata(&spmi->dev);
+#ifdef CONFIG_RTC_AUTO_PWRON_PARAM
+	destroy_workqueue(sapa_workq);
+#endif
 
 	device_init_wakeup(&spmi->dev, 0);
 	free_irq(rtc_dd->rtc_alarm_irq, rtc_dd);
@@ -630,6 +1179,42 @@ static int qpnp_rtc_remove(struct spmi_device *spmi)
 	return 0;
 }
 
+#ifdef CONFIG_RTC_AUTO_PWRON
+static void qpnp_rtc_shutdown(struct spmi_device *spmi)
+{
+	u8 value[4] = {0};
+	unsigned long secs;
+	u8 ctrl_reg;
+	int rc;
+	struct qpnp_rtc *rtc_dd = dev_get_drvdata(&spmi->dev);
+
+	shutdown_loaded = 1;
+	qpnp_rtc0_resetbootalarm(&spmi->dev);
+
+	/* Check if the RTC is on, else turn it on */
+	rc = qpnp_read_wrapper(rtc_dd, &ctrl_reg,
+				rtc_dd->rtc_base + REG_OFFSET_RTC_CTRL, 1);
+	if (rc < 0) {
+		dev_err(&spmi->dev, "%s qpnp read failed!\n",__func__);
+	}
+
+	rc = qpnp_read_wrapper(rtc_dd, value,
+				rtc_dd->alarm_base + REG_OFFSET_ALARM_RW,
+				NUM_8_BIT_RTC_REGS);
+
+	secs = value[0] | (value[1] << 8) | (value[2] << 16) \
+						| (value[3] << 24);
+
+	pr_info("%s : secs = %lu\n", __func__,secs);
+	pr_info("%s RTC Register : %d \n", __func__, ctrl_reg);
+
+
+#ifdef CONFIG_RTC_AUTO_PWRON_PARAM
+	wake_lock_destroy(&sapa_wakelock);
+#endif
+}
+#else
+
 static void qpnp_rtc_shutdown(struct spmi_device *spmi)
 {
 	u8 value[4] = {0};
@@ -674,6 +1259,7 @@ fail_alarm_disable:
 		spin_unlock_irqrestore(&rtc_dd->alarm_ctrl_lock, irq_flags);
 	}
 }
+#endif /* CONFIG_RTC_AUTO_PWRON */
 
 static struct of_device_id spmi_match_table[] = {
 	{
@@ -690,6 +1276,9 @@ static struct spmi_driver qpnp_rtc_driver = {
 		.name   = "qcom,qpnp-rtc",
 		.owner  = THIS_MODULE,
 		.of_match_table = spmi_match_table,
+#ifdef CONFIG_RTC_AUTO_PWRON_PARAM
+		.pm	= &qpnp_rtc_pm_ops,
+#endif
 	},
 };
 
diff --git a/drivers/rtc/rtc-sysfs.c b/drivers/rtc/rtc-sysfs.c
index b70e2bb63645..18333f9b4d41 100644
--- a/drivers/rtc/rtc-sysfs.c
+++ b/drivers/rtc/rtc-sysfs.c
@@ -122,6 +122,26 @@ rtc_sysfs_show_hctosys(struct device *dev, struct device_attribute *attr,
 		return sprintf(buf, "0\n");
 }
 
+#ifdef CONFIG_RTC_AUTO_PWRON
+extern int rtc_get_bootalarm(struct rtc_device *rtc, struct rtc_wkalrm *alarm);
+static ssize_t
+rtc_sysfs_show_alarm_boot(struct device *dev, struct device_attribute *attr,
+		char *buf)
+{
+	ssize_t retval;
+	struct rtc_wkalrm alm;
+
+	retval = rtc_get_bootalarm(to_rtc_device(dev), &alm);
+	if (retval) {
+		retval = sprintf(buf, "%d", alm.enabled);
+		pr_info("%s [SAPA] rtc_sysfs_show_wakealarm enabled? : %d\n",__func__,alm.enabled);
+		return retval;
+	}
+
+	return retval;
+}
+#endif
+
 static struct device_attribute rtc_attrs[] = {
 	__ATTR(name, S_IRUGO, rtc_sysfs_show_name, NULL),
 	__ATTR(date, S_IRUGO, rtc_sysfs_show_date, NULL),
@@ -130,6 +150,9 @@ static struct device_attribute rtc_attrs[] = {
 	__ATTR(max_user_freq, S_IRUGO | S_IWUSR, rtc_sysfs_show_max_user_freq,
 			rtc_sysfs_set_max_user_freq),
 	__ATTR(hctosys, S_IRUGO, rtc_sysfs_show_hctosys, NULL),
+#ifdef CONFIG_RTC_AUTO_PWRON
+	__ATTR(alarm_boot, S_IRUGO, rtc_sysfs_show_alarm_boot, NULL),
+#endif
 	{ },
 };
 
diff --git a/drivers/staging/android/alarm-dev.c b/drivers/staging/android/alarm-dev.c
index c552ab68079d..d2a6800fd4af 100644
--- a/drivers/staging/android/alarm-dev.c
+++ b/drivers/staging/android/alarm-dev.c
@@ -170,6 +170,14 @@ static int alarm_set_rtc(struct timespec *ts)
 	int rv = 0;
 
 	rtc_time_to_tm(ts->tv_sec, &new_rtc_tm);
+#ifdef CONFIG_RTC_AUTO_PWRON
+	pr_info("%s : set rtc %ld %ld - rtc %02d:%02d:%02d %02d/%02d/%04d\n", __func__,
+		ts->tv_sec, ts->tv_nsec,
+		new_rtc_tm.tm_hour, new_rtc_tm.tm_min,
+		new_rtc_tm.tm_sec, new_rtc_tm.tm_mon + 1,
+		new_rtc_tm.tm_mday,
+		new_rtc_tm.tm_year + 1900);
+#endif
 	rtc_dev = alarmtimer_get_rtcdev();
 	rv = do_settimeofday(ts);
 	if (rv < 0)
@@ -266,6 +274,9 @@ static long alarm_ioctl(struct file *file, unsigned int cmd, unsigned long arg)
 
 	struct timespec ts;
 	int rv;
+#if defined(CONFIG_RTC_AUTO_PWRON)
+	char bootalarm_data[14];
+#endif
 
 	switch (ANDROID_ALARM_BASE_CMD(cmd)) {
 	case ANDROID_ALARM_SET_AND_WAIT(0):
@@ -275,6 +286,15 @@ static long alarm_ioctl(struct file *file, unsigned int cmd, unsigned long arg)
 		if (copy_from_user(&ts, (void __user *)arg, sizeof(ts)))
 			return -EFAULT;
 		break;
+#if defined(CONFIG_RTC_AUTO_PWRON)
+	case ANDROID_ALARM_SET_ALARM_BOOT:
+		if (copy_from_user(bootalarm_data, (void __user *)arg, 14)) {
+			rv = -EFAULT;
+			return rv;
+		}
+		rv = alarm_set_alarm(bootalarm_data);
+		break;
+#endif
 	}
 
 	rv = alarm_do_ioctl(file, cmd, &ts);
diff --git a/drivers/staging/android/android_alarm.h b/drivers/staging/android/android_alarm.h
index 495b20cf3bf6..71129a09c226 100644
--- a/drivers/staging/android/android_alarm.h
+++ b/drivers/staging/android/android_alarm.h
@@ -18,9 +18,30 @@
 
 #include <linux/compat.h>
 #include <linux/ioctl.h>
+#include <linux/time.h>
+#include <linux/compat.h>
 
 #include "uapi/android_alarm.h"
 
+/* Disable alarm */
+#define ANDROID_ALARM_CLEAR(type)           _IO('a', 0 | ((type) << 4))
+
+/* Ack last alarm and wait for next */
+#define ANDROID_ALARM_WAIT                  _IO('a', 1)
+
+#define ALARM_IOW(c, type, size)            _IOW('a', (c) | ((type) << 4), size)
+/* Set alarm */
+#define ANDROID_ALARM_SET(type)             ALARM_IOW(2, type, struct timespec)
+#define ANDROID_ALARM_SET_AND_WAIT(type)    ALARM_IOW(3, type, struct timespec)
+#define ANDROID_ALARM_GET_TIME(type)        ALARM_IOW(4, type, struct timespec)
+#define ANDROID_ALARM_SET_RTC               _IOW('a', 5, struct timespec)
+#if defined(CONFIG_RTC_AUTO_PWRON)
+#define ANDROID_ALARM_SET_ALARM_BOOT	    _IOW('a', 7, struct timespec)
+#endif
+
+#define ANDROID_ALARM_BASE_CMD(cmd)         (cmd & ~(_IOC(0, 0, 0xf0, 0)))
+#define ANDROID_ALARM_IOCTL_TO_TYPE(cmd)    (_IOC_NR(cmd) >> 4)
+
 #ifdef CONFIG_COMPAT
 #define ANDROID_ALARM_SET_COMPAT(type)		ALARM_IOW(2, type, \
 							struct compat_timespec)
diff --git a/include/linux/alarmtimer.h b/include/linux/alarmtimer.h
index 53574d56f2ec..bfeb2e27b8cd 100644
--- a/include/linux/alarmtimer.h
+++ b/include/linux/alarmtimer.h
@@ -21,6 +21,12 @@ enum alarmtimer_restart {
 
 #define ALARMTIMER_STATE_INACTIVE	0x00
 #define ALARMTIMER_STATE_ENQUEUED	0x01
+#define pr_alarm(debug_level_mask, args...) \
+	do { \
+		if (debug_mask & ANDROID_ALARM_PRINT_##debug_level_mask) { \
+			pr_info(args); \
+		} \
+	} while (0)
 
 /**
  * struct alarm - Alarm timer structure
@@ -49,6 +55,9 @@ void alarm_restart(struct alarm *alarm);
 int alarm_try_to_cancel(struct alarm *alarm);
 int alarm_cancel(struct alarm *alarm);
 void set_power_on_alarm(long secs, bool enable);
+#ifdef CONFIG_RTC_AUTO_PWRON
+int alarm_set_alarm(char *alarm_data);
+#endif /* CONFIG_AUTO_PWRON */
 
 u64 alarm_forward(struct alarm *alarm, ktime_t now, ktime_t interval);
 u64 alarm_forward_now(struct alarm *alarm, ktime_t interval);
@@ -56,5 +65,8 @@ ktime_t alarm_expires_remaining(const struct alarm *alarm);
 
 /* Provide way to access the rtc device being used by alarmtimers */
 struct rtc_device *alarmtimer_get_rtcdev(void);
+#if defined(CONFIG_RTC_AUTO_PWRON)
+int alarm_set_alarm_boot(char *alarm_data);
+#endif
 
 #endif
diff --git a/include/linux/rtc.h b/include/linux/rtc.h
index c2c28975293c..92259d16ae4b 100644
--- a/include/linux/rtc.h
+++ b/include/linux/rtc.h
@@ -59,6 +59,10 @@ struct rtc_class_ops {
 	int (*set_time)(struct device *, struct rtc_time *);
 	int (*read_alarm)(struct device *, struct rtc_wkalrm *);
 	int (*set_alarm)(struct device *, struct rtc_wkalrm *);
+#ifdef CONFIG_RTC_AUTO_PWRON
+	int (*read_bootalarm)(struct device *, struct rtc_wkalrm *);
+	int (*set_bootalarm)(struct device *, struct rtc_wkalrm *);
+#endif
 	int (*proc)(struct device *, struct seq_file *);
 	int (*set_mmss)(struct device *, unsigned long secs);
 	int (*read_callback)(struct device *, int data);
diff --git a/include/linux/sec_param.h b/include/linux/sec_param.h
index abdd8a316729..e11f7601ff50 100644
--- a/include/linux/sec_param.h
+++ b/include/linux/sec_param.h
@@ -18,6 +18,11 @@ struct sec_param_data {
 #ifdef CONFIG_GSM_MODEM_SPRD6500
 	unsigned int update_cp_bin;
 #endif
+#ifdef CONFIG_RTC_AUTO_PWRON_PARAM
+	unsigned int boot_alarm_set;
+	unsigned int boot_alarm_value_l;
+	unsigned int boot_alarm_value_h;
+#endif
 #ifdef CONFIG_SEC_MONITOR_BATTERY_REMOVAL
 	unsigned int normal_poweroff;
 #endif
@@ -39,6 +44,11 @@ enum sec_param_index {
 #ifdef CONFIG_GSM_MODEM_SPRD6500
 	param_update_cp_bin,
 #endif
+#ifdef CONFIG_RTC_AUTO_PWRON_PARAM
+	param_index_boot_alarm_set,
+	param_index_boot_alarm_value_l,
+	param_index_boot_alarm_value_h,
+#endif
 #ifdef CONFIG_SEC_MONITOR_BATTERY_REMOVAL
 	param_index_normal_poweroff,
 #endif
diff --git a/kernel/time/alarmtimer.c b/kernel/time/alarmtimer.c
index bf1eca6ab8ec..e8c29c7b44e8 100644
--- a/kernel/time/alarmtimer.c
+++ b/kernel/time/alarmtimer.c
@@ -166,6 +166,109 @@ rtc_irq_reg_err:
 
 }
 
+#ifdef CONFIG_RTC_AUTO_PWRON
+extern int rtc_set_bootalarm(struct rtc_device *rtc, struct rtc_wkalrm *alarm);
+/* 0|1234|56|78|90|12 */
+/* 1|2010|01|01|00|00 */
+//en yyyy mm dd hh mm
+#define BOOTALM_BIT_EN       0
+#define BOOTALM_BIT_YEAR     1
+#define BOOTALM_BIT_MONTH    5
+#define BOOTALM_BIT_DAY      7
+#define BOOTALM_BIT_HOUR     9
+#define BOOTALM_BIT_MIN     11
+#define BOOTALM_BIT_TOTAL   13
+
+int alarm_set_alarm(char* alarm_data)
+{
+	struct rtc_wkalrm alm;
+	int ret;
+	char buf_ptr[BOOTALM_BIT_TOTAL+1];
+	struct rtc_time     rtc_tm;
+	unsigned long       rtc_sec;
+	unsigned long       rtc_alarm_time;
+	struct timespec     rtc_delta;
+	struct timespec     wall_time;
+	ktime_t             wall_ktm;
+	struct rtc_time     wall_tm;
+
+	if (!rtcdev) {
+		printk(
+			"alarm_set_alarm: no RTC, time will be lost on reboot\n");
+		return -1;
+	}
+
+	strlcpy(buf_ptr, alarm_data, BOOTALM_BIT_TOTAL+1);
+
+	alm.time.tm_sec = 0;
+	alm.time.tm_min  =  (buf_ptr[BOOTALM_BIT_MIN]    -'0') * 10
+	                  + (buf_ptr[BOOTALM_BIT_MIN+1]  -'0');
+	alm.time.tm_hour =  (buf_ptr[BOOTALM_BIT_HOUR]   -'0') * 10
+	                  + (buf_ptr[BOOTALM_BIT_HOUR+1] -'0');
+	alm.time.tm_mday =  (buf_ptr[BOOTALM_BIT_DAY]    -'0') * 10
+	                  + (buf_ptr[BOOTALM_BIT_DAY+1]  -'0');
+	alm.time.tm_mon  =  (buf_ptr[BOOTALM_BIT_MONTH]  -'0') * 10
+	                  + (buf_ptr[BOOTALM_BIT_MONTH+1]-'0');
+	alm.time.tm_year =  (buf_ptr[BOOTALM_BIT_YEAR]   -'0') * 1000
+	                  + (buf_ptr[BOOTALM_BIT_YEAR+1] -'0') * 100
+	                  + (buf_ptr[BOOTALM_BIT_YEAR+2] -'0') * 10
+	                  + (buf_ptr[BOOTALM_BIT_YEAR+3] -'0');
+
+	alm.enabled = (*buf_ptr == '1');
+
+	pr_info("[SAPA] %s : %s => tm(%d %04d-%02d-%02d %02d:%02d:%02d)\n",
+			__func__, buf_ptr, alm.enabled,
+			alm.time.tm_year, alm.time.tm_mon, alm.time.tm_mday,
+			alm.time.tm_hour, alm.time.tm_min, alm.time.tm_sec);
+
+	if ( alm.enabled ) {
+		/* If time daemon is exist */
+
+		alm.time.tm_mon -= 1;
+		alm.time.tm_year -= 1900;
+
+		/* read current time */
+		rtc_read_time(rtcdev, &rtc_tm);
+		rtc_tm_to_time(&rtc_tm, &rtc_sec);
+		pr_info("[SAPA] rtc  %4d-%02d-%02d %02d:%02d:%02d -> %lu\n",
+			rtc_tm.tm_year, rtc_tm.tm_mon, rtc_tm.tm_mday,
+			rtc_tm.tm_hour, rtc_tm.tm_min, rtc_tm.tm_sec, rtc_sec);
+
+		/* read kernel time */
+		getnstimeofday(&wall_time);
+		wall_ktm = timespec_to_ktime(wall_time);
+		wall_tm = rtc_ktime_to_tm(wall_ktm);
+		pr_info("[SAPA] wall %4d-%02d-%02d %02d:%02d:%02d -> %lu\n",
+			wall_tm.tm_year, wall_tm.tm_mon, wall_tm.tm_mday,
+			wall_tm.tm_hour, wall_tm.tm_min, wall_tm.tm_sec, wall_time.tv_sec);
+
+		/* calculate offset */
+		set_normalized_timespec(&rtc_delta,
+					wall_time.tv_sec - rtc_sec,
+					wall_time.tv_nsec);
+
+		/* convert user requested SAPA time to second type */
+		rtc_tm_to_time(&alm.time, &rtc_alarm_time);
+
+		/* convert to RTC time with user requested SAPA time and offset */
+		rtc_alarm_time -= rtc_delta.tv_sec;
+		rtc_time_to_tm(rtc_alarm_time, &alm.time);
+		pr_info("[SAPA] arlm %4d-%02d-%02d %02d:%02d:%02d -> %lu\n",
+			alm.time.tm_year, alm.time.tm_mon, alm.time.tm_mday,
+			alm.time.tm_hour, alm.time.tm_min, alm.time.tm_sec, rtc_alarm_time);
+
+	}
+	ret = rtc_set_bootalarm(rtcdev, &alm);
+	if (ret < 0) {
+		printk( "alarm_set_alarm: "
+			"Failed to set ALARM, time will be lost on reboot\n");
+		return -2;
+	}
+	return 0;
+}
+extern int alarm_set_alarm(char* alarm_data);
+#endif /*CONFIG_RTC_AUTO_PWRON*/
+
 static void alarmtimer_rtc_remove_device(struct device *dev,
 				struct class_interface *class_intf)
 {
