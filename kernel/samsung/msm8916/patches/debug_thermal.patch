diff --git a/drivers/thermal/Kconfig b/drivers/thermal/Kconfig
index cf2534c5df09..e69fa3f33de8 100644
--- a/drivers/thermal/Kconfig
+++ b/drivers/thermal/Kconfig
@@ -138,6 +138,13 @@ config SUPPLY_LM_MONITOR
 	 temperature. Based on these inputs, the driver throttles
 	 apps subsystem.
 
+config DEBUG_THERMAL
+	bool "Monitor thermal state and limit CPU Frequency"
+	depends on THERMAL
+	default n
+	help
+	  Monitors TSENS temperature for Debugging purporse.
+
 config SPEAR_THERMAL
 	bool "SPEAr thermal sensor driver"
 	depends on PLAT_SPEAR
diff --git a/drivers/thermal/msm_thermal.c b/drivers/thermal/msm_thermal.c
index bb9eb527467e..10bdec2a5c59 100644
--- a/drivers/thermal/msm_thermal.c
+++ b/drivers/thermal/msm_thermal.c
@@ -240,6 +240,9 @@ static struct threshold_info *thresh;
 static bool mx_restr_applied;
 static struct cluster_info *core_ptr;
 static struct devmgr_devices *devices;
+#if defined(CONFIG_DEBUG_THERMAL)
+static struct delayed_work temp_log_work;
+#endif /* CONFIG_DEBUG_THERMAL */
 
 struct vdd_rstr_enable {
 	struct kobj_attribute ko_attr;
@@ -4166,6 +4169,33 @@ device_exit:
 	return ret;
 }
 
+/* Method to log the tsens values for every 5secs. */
+#if defined(CONFIG_DEBUG_THERMAL)
+static void __ref msm_therm_temp_log(struct work_struct *work)
+{
+    struct tsens_device tsens_dev;
+    long temp = 0;
+    uint32_t max_sensors = 0;
+
+    if(!(tsens_get_max_sensor_num(&max_sensors)))
+    {
+          int i ,added = 0;
+          char buffer[500];
+          for (i = 0 ; i< max_sensors;i++)
+          {
+               int ret = 0;
+               tsens_dev.sensor_num = i;
+               tsens_get_temp(&tsens_dev,&temp);
+               ret = sprintf(buffer + added , "(%d --- %ld)", i ,temp );
+               added += ret;
+          }
+          pr_info("%s: Debug Temp for Sensors %s\n",KBUILD_MODNAME,buffer);
+
+    }
+    schedule_delayed_work(&temp_log_work, HZ*5);
+}
+#endif /* CONFIG_DEBUG_THERMAL */
+
 int msm_thermal_init(struct msm_thermal_data *pdata)
 {
 	int ret = 0;
@@ -4206,6 +4236,11 @@ int msm_thermal_init(struct msm_thermal_data *pdata)
 	INIT_DELAYED_WORK(&check_temp_work, check_temp);
 	schedule_delayed_work(&check_temp_work, 0);
 
+#if defined(CONFIG_DEBUG_THERMAL)
+    INIT_DELAYED_WORK(&temp_log_work,msm_therm_temp_log);
+    schedule_delayed_work(&temp_log_work,HZ*2);
+#endif /* CONFIG_DEBUG_THERMAL */
+
 	if (num_possible_cpus() > 1)
 		register_cpu_notifier(&msm_thermal_cpu_notifier);
 
@@ -5470,7 +5505,9 @@ fail:
 static int msm_thermal_dev_exit(struct platform_device *inp_dev)
 {
 	int i = 0;
-
+#if defined(CONFIG_DEBUG_THERMAL)
+    cancel_delayed_work_sync(&temp_log_work);
+#endif /* CONFIG_DEBUG_THERMAL */
 	msm_thermal_ioctl_cleanup();
 	if (thresh) {
 		if (therm_reset_enabled)
