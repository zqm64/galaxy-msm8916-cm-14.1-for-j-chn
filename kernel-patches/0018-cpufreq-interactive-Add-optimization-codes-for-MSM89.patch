From fb0b7c3ae17b8f9cd43aa827a74e623c7c5c2f5a Mon Sep 17 00:00:00 2001
From: zqm64 <zqm64@outlook.com>
Date: Wed, 13 May 2020 20:30:11 +0800
Subject: [PATCH 18/25] cpufreq: interactive: Add optimization codes for
 MSM8929

Change-Id: I56cadcc051ce2a2d6cba1d7248aa082afa454c6c
---
 drivers/cpufreq/cpufreq_interactive.c | 93 ++++++++++++++++++++++++++-
 1 file changed, 91 insertions(+), 2 deletions(-)

diff --git a/drivers/cpufreq/cpufreq_interactive.c b/drivers/cpufreq/cpufreq_interactive.c
index d0c77147f8a..311ae7cc7ee 100644
--- a/drivers/cpufreq/cpufreq_interactive.c
+++ b/drivers/cpufreq/cpufreq_interactive.c
@@ -141,8 +141,15 @@ struct cpufreq_interactive_tunables {
 	 * frequency.
 	 */
 	unsigned int max_freq_hysteresis;
+#if defined(CONFIG_ARCH_MSM8929)
+	unsigned int lpm_disable_freq;
+#endif
 };
 
+#if defined(CONFIG_ARCH_MSM8929)
+extern int lpm_set_mode(u8 cpu_mask, u32 power_level, bool on);
+#endif
+
 /* For cases where we have single governor instance for system */
 static struct cpufreq_interactive_tunables *common_tunables;
 
@@ -411,6 +418,19 @@ static void cpufreq_interactive_timer(unsigned long data)
 	spin_lock_irqsave(&pcpu->load_lock, flags);
 	pcpu->last_evaluated_jiffy = get_jiffies_64();
 	now = update_load(data);
+#if defined(CONFIG_ARCH_MSM8929)
+	/*
+	* We will use way of original interactive governor calculation on the MSM8929 project
+	* Instead of using scheduler load.
+	*/
+	delta_time = (unsigned int)
+			(now - pcpu->cputime_speedadj_timestamp);
+	cputime_speedadj = pcpu->cputime_speedadj;
+	spin_unlock_irqrestore(&pcpu->load_lock, flags);
+	if (WARN_ON_ONCE(!delta_time))
+		goto rearm;
+	do_div(cputime_speedadj, delta_time);
+#else
 	if (tunables->use_sched_load) {
 		/*
 		 * Unlock early to avoid deadlock.
@@ -439,6 +459,7 @@ static void cpufreq_interactive_timer(unsigned long data)
 			goto rearm;
 		do_div(cputime_speedadj, delta_time);
 	}
+#endif
 
 	loadadjfreq = (unsigned int)cputime_speedadj * 100;
 
@@ -641,6 +662,13 @@ static int cpufreq_interactive_speedchange_task(void *data)
 	unsigned long flags;
 	struct cpufreq_interactive_cpuinfo *pcpu;
 
+#if defined(CONFIG_ARCH_MSM8929)
+	struct cpufreq_interactive_tunables *tunables;
+	u8 cpu_mask=0x01;
+	//masking 0x00000001:WFI, 0x00000002:SPC, 0x00000003:WFI+SPC, 0x00000004:PC, 0x00000005:WFI+PC, 0x00000006:SPC+PC, 0x00000007:WFI+SPC+PC
+	u32 power_level_mask=0x00000006;
+#endif
+
 	while (1) {
 		set_current_state(TASK_INTERRUPTIBLE);
 		spin_lock_irqsave(&speedchange_cpumask_lock, flags);
@@ -686,6 +714,17 @@ static int cpufreq_interactive_speedchange_task(void *data)
 				}
 			}
 
+#if defined(CONFIG_ARCH_MSM8929)
+			//Disable LPM Mode when cpu freq. rise up over than hispeed freq.
+			tunables = pcpu->policy->governor_data;
+			if (pcpu->target_freq >= tunables->lpm_disable_freq){
+				lpm_set_mode(cpu_mask << cpu, power_level_mask << cpu*4, 0);
+			}
+			else {
+				lpm_set_mode(cpu_mask << cpu, power_level_mask << cpu*4, 1);
+			}
+#endif
+
 			if (max_freq != pcpu->policy->cur) {
 				__cpufreq_driver_target(pcpu->policy,
 							max_freq,
@@ -972,6 +1011,27 @@ static ssize_t store_hispeed_freq(struct cpufreq_interactive_tunables *tunables,
 	return count;
 }
 
+#if defined(CONFIG_ARCH_MSM8929)
+static ssize_t show_lpm_disable_freq(struct cpufreq_interactive_tunables *tunables,
+		char *buf)
+{
+	return sprintf(buf, "%u\n", tunables->lpm_disable_freq);
+}
+
+static ssize_t store_lpm_disable_freq(struct cpufreq_interactive_tunables *tunables,
+		const char *buf, size_t count)
+{
+	int ret;
+	long unsigned int val;
+
+	ret = strict_strtoul(buf, 0, &val);
+	if (ret < 0)
+		return ret;
+	tunables->lpm_disable_freq = val;
+	return count;
+}
+#endif
+
 #define show_store_one(file_name)					\
 static ssize_t show_##file_name(					\
 	struct cpufreq_interactive_tunables *tunables, char *buf)	\
@@ -1377,6 +1437,9 @@ show_store_gov_pol_sys(use_sched_load);
 show_store_gov_pol_sys(use_migration_notif);
 show_store_gov_pol_sys(max_freq_hysteresis);
 show_store_gov_pol_sys(align_windows);
+#if defined(CONFIG_ARCH_MSM8929)
+show_store_gov_pol_sys(lpm_disable_freq);
+#endif
 
 #define gov_sys_attr_rw(_name)						\
 static struct global_attr _name##_gov_sys =				\
@@ -1404,6 +1467,9 @@ gov_sys_pol_attr_rw(use_sched_load);
 gov_sys_pol_attr_rw(use_migration_notif);
 gov_sys_pol_attr_rw(max_freq_hysteresis);
 gov_sys_pol_attr_rw(align_windows);
+#if defined(CONFIG_ARCH_MSM8929)
+gov_sys_pol_attr_rw(lpm_disable_freq);
+#endif
 
 static struct global_attr boostpulse_gov_sys =
 	__ATTR(boostpulse, 0200, NULL, store_boostpulse_gov_sys);
@@ -1428,6 +1494,9 @@ static struct attribute *interactive_attributes_gov_sys[] = {
 	&use_migration_notif_gov_sys.attr,
 	&max_freq_hysteresis_gov_sys.attr,
 	&align_windows_gov_sys.attr,
+#if defined(CONFIG_ARCH_MSM8929)
+	&lpm_disable_freq_gov_sys.attr,
+#endif
 	NULL,
 };
 
@@ -1453,6 +1522,9 @@ static struct attribute *interactive_attributes_gov_pol[] = {
 	&use_migration_notif_gov_pol.attr,
 	&max_freq_hysteresis_gov_pol.attr,
 	&align_windows_gov_pol.attr,
+#if defined(CONFIG_ARCH_MSM8929)
+	&lpm_disable_freq_gov_pol.attr,
+#endif
 	NULL,
 };
 
@@ -1558,7 +1630,16 @@ static int cpufreq_governor_interactive(struct cpufreq_policy *policy,
 	struct cpufreq_interactive_tunables *tunables;
 	unsigned long flags;
 	int first_cpu;
-
+#if defined(CONFIG_ARCH_MSM8929)
+		//masking for little core
+		u8 cpu_mask=0xF0;
+		u32 power_level_mask=0x66660000;
+		//masking for big core
+		if (policy->cpu <= 3) {
+			cpu_mask = 0x0F;
+			power_level_mask = 0x00006666;
+		}
+#endif
 	if (have_governor_per_policy())
 		tunables = policy->governor_data;
 	else
@@ -1645,7 +1726,10 @@ static int cpufreq_governor_interactive(struct cpufreq_policy *policy,
 		freq_table = cpufreq_frequency_get_table(policy->cpu);
 		if (!tunables->hispeed_freq)
 			tunables->hispeed_freq = policy->max;
-
+#if defined(CONFIG_ARCH_MSM8929)
+		if (!tunables->lpm_disable_freq)
+			tunables->lpm_disable_freq = policy->max;
+#endif
 		for_each_cpu(j, policy->cpus) {
 			pcpu = &per_cpu(cpuinfo, j);
 			pcpu->policy = policy;
@@ -1692,6 +1776,11 @@ static int cpufreq_governor_interactive(struct cpufreq_policy *policy,
 	case CPUFREQ_GOV_LIMITS:
 		__cpufreq_driver_target(policy,
 				policy->cur, CPUFREQ_RELATION_L);
+#if defined(CONFIG_ARCH_MSM8929)
+			//Disable LPM Mode when scaling_min_freq set up over than hispeed freq.
+			if (policy->min >= tunables->lpm_disable_freq)
+				lpm_set_mode(cpu_mask, power_level_mask, 0);
+#endif
 		for_each_cpu(j, policy->cpus) {
 			pcpu = &per_cpu(cpuinfo, j);
 
-- 
2.20.1

